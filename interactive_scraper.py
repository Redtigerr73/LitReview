#!/usr/bin/env python3
import sys
import datetime
from scraper import ScholarScraper

def print_welcome():
    """Affiche le message de bienvenue"""
    print("\n" + "="*50)
    print("  Bienvenue dans le Google Scholar Scraper")
    print("  Version 2.0 - F√©vrier 2025")
    print("="*50 + "\n")
    print("Ce programme vous permet de rechercher des articles scientifiques")
    print("sur Google Scholar et de sauvegarder les r√©sultats au format CSV.\n")

def get_search_queries():
    """Obtient les requ√™tes de recherche de l'utilisateur"""
    print("\n" + "-"*50)
    print("√âTAPE 1: D√©finition des mots-cl√©s de recherche")
    print("-"*50)
    print("Entrez vos mots-cl√©s de recherche, s√©par√©s par des virgules.")
    print("Exemple: deep learning, neural networks, machine learning\n")
    
    while True:
        input_text = input("Mots-cl√©s > ").strip()
        if not input_text:
            print("‚ö†Ô∏è  Veuillez entrer au moins un mot-cl√©.")
            continue
        
        queries = [q.strip() for q in input_text.split(',') if q.strip()]
        if not queries:
            print("‚ö†Ô∏è  Format invalide. Utilisez des virgules pour s√©parer les mots-cl√©s.")
            continue
            
        print(f"\n‚úÖ {len(queries)} requ√™te(s) enregistr√©e(s):")
        for i, q in enumerate(queries, 1):
            print(f"   {i}. {q}")
        return queries

def get_article_count():
    """Obtient le nombre d'articles souhait√©s"""
    print("\n" + "-"*50)
    print("√âTAPE 2: Nombre d'articles √† rechercher")
    print("-"*50)
    print("Combien d'articles souhaitez-vous rechercher au total ?")
    print("(Min: 10, Max: 10000, par tranches de 10)\n")
    
    while True:
        try:
            count = int(input("Nombre d'articles > "))
            if 10 <= count <= 10000:
                pages = (count + 9) // 10  # Arrondi sup√©rieur
                print(f"\n‚úÖ Recherche de {count} articles ({pages} pages)")
                return pages
            print("‚ö†Ô∏è  Le nombre doit √™tre entre 10 et 10000.")
        except ValueError:
            print("‚ö†Ô∏è  Veuillez entrer un nombre valide.")

def generate_output_filename(queries):
    """G√©n√®re le nom du fichier de sortie"""
    now = datetime.datetime.now()
    date_str = now.strftime("%Y%m%d_%H%M%S")
    query_str = queries[0].lower().replace(" ", "_")[:30]
    if len(queries) > 1:
        query_str += f"_plus_{len(queries)-1}"
    return f"data/csv/scholar_{date_str}_{query_str}.csv"

def main():
    try:
        # Affichage du message de bienvenue
        print_welcome()
        
        # R√©cup√©ration des requ√™tes
        queries = get_search_queries()
        
        # R√©cup√©ration du nombre d'articles
        max_pages = get_article_count()
        
        # G√©n√©ration du nom de fichier
        outfile = generate_output_filename(queries)
        
        # R√©sum√© et confirmation
        print("\n" + "-"*50)
        print("R√âSUM√â DE LA RECHERCHE")
        print("-"*50)
        print(f"‚Ä¢ Nombre de requ√™tes: {len(queries)}")
        print(f"‚Ä¢ Pages √† scraper: {max_pages}")
        print(f"‚Ä¢ Articles attendus: ~{max_pages * 10}")
        print(f"‚Ä¢ Fichier de sortie: {outfile}")
        print("\nLe scraping peut prendre plusieurs minutes.")
        
        confirm = input("\nD√©marrer la recherche ? (o/n) > ").lower()
        if confirm != 'o':
            print("\n‚ùå Op√©ration annul√©e")
            sys.exit(0)
        
        # Initialisation et ex√©cution du scraper
        print("\n" + "-"*50)
        print("PROGRESSION DU SCRAPING")
        print("-"*50)
        
        scraper = ScholarScraper(outfile)
        total_operations = len(queries) * max_pages
        current_operation = 0
        
        def progress_callback():
            nonlocal current_operation
            current_operation += 1
            progress = (current_operation / total_operations) * 100
            print(f"\rProgression: {progress:.1f}% ", end="", flush=True)
        
        scraper.run(queries, max_pages, start_num=0, progress_callback=progress_callback)
        
        print("\n\n‚úÖ Scraping termin√© avec succ√®s!")
        print(f"üìä R√©sultats sauvegard√©s dans: {outfile}")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Op√©ration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
